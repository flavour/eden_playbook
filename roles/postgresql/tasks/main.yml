---
- name: Create repo file
  file: path=/etc/apt/sources.list.d/pgdg.list state=touch

- name: Add repo url
  lineinfile: dest=/etc/apt/sources.list.d/pgdg.list line="deb http://apt.postgresql.org/pub/repos/apt/ {{ distro }}-pgdg main"

- name: Add key
  apt_key: url=https://www.postgresql.org/media/keys/ACCC4CF8.asc state=present

- name: Install dependencies and package
  apt: name={{ item }} state=latest update_cache=yes
  with_items:
    - postgresql-9.3
    - python-psycopg2
    - postgresql-9.3-postgis-2.1
    - ptop

- name: tune-up
  sysctl: "name={{ item.name }} value={{ item.value }} state=present"
  with_items:
    - { name: 'kernel.shmmax', value: '279134208' }
    - { name: 'kernel.shmall', value: '2097152' }

- name: Set track_counts=on
  lineinfile: dest=/etc/postgresql/9.3/main/postgresql.conf
              regexp='^track_counts = on'
              insertafter='^#track_counts = on'
              line='track_counts = on'
              state=present

- name: Set autovacuum=on
  lineinfile: dest=/etc/postgresql/9.3/main/postgresql.conf
              regexp='^autovacuum = on'
              insertafter='^autovacuum = on'
              line='autovacuum = on'
              state=present

- name: Tune-up for 512MB RAM
  lineinfile: dest=/etc/postgresql/9.3/main/postgresql.conf
              regexp="{{ item.regexp }}"
              insertafter="{{ item.insertafter }}"
              line="{{ item.line }}"
              state=present
  with_items:
    - { regexp: '^shared_buffers = 28MB', insertafter: '^shared_buffers = 28MB', line: 'shared_buffers = 56MB' }
    - { regexp: '^effective_cache_size = 128MB', insertafter: '^#effective_cache_size = 128MB', line: 'effective_cache_size = 256MB' }
    - { regexp: '^work_mem = 1MB', insertafter: '^#work_mem = 1MB', line: 'work_mem = 2MB' }

- name: Copying management scripts
  copy: "src={{ item.src }} dest={{ item.dest }} mode=755"
  with_items:
    - { src: 'backup', dest: '/usr/local/bin/backup' }
    - { src: 'pg512', dest: '/usr/local/bin/pg512' }
    - { src: 'pg1024', dest: '/usr/local/bin/pg1024' }

# - name: Copy clean script
#  template: src=clean.j2 dest=/usr/local/bin/clean mode=755

- name: Transfer pgpass.sql
  template: src=pgpass.sql dest=/tmp/pgpass.sql

- name: Update PostgreSQL password
  command: su -c - postgres "psql -q -d template1 -f /tmp/pgpass.sql"

- name: Remove pgpass.sql
  file: path=/tmp/pgpass.sql state=absent

- name: Create DB
  command: su -c - postgres "createdb -O sahana -E UTF8 -l en_US.UTF-8 sahana -T template0"
  when: type == 'prod'

- name: Create DB
  command: su -c - postgres "createdb -O sahana -E UTF8 -l en_US.UTF-8 sahana-demo -T template0"
  when: type == 'demo'
  tags:
   - demo

- name: Get PostGIS version
  shell: dpkg-query -L postgresql-9.3-postgis-scripts | grep -P "postgis--\d+.\d+.\d+.sql"
  register: postgis_version
  tags:
    - test
    - demo

- name: Copy clean script
  template: src=clean.sh dest=/usr/local/bin/clean mode=755
  tags:
    - test
    - demo

- name: PostGIS DB Config
  command: "{{ item }}"
  with_items:
    - su -c - postgres "psql -q -d sahana -f {{ postgis_version.stdout }}"
    - su -c - postgres "psql -q -d sahana -c 'grant all on geometry_columns to sahana;'"
    - su -c - postgres "psql -q -d sahana -c 'grant all on spatial_ref_sys to sahana;'"
  when: type == 'prod'

- name: PostGIS DB Config
  command: "{{ item }}"
  with_items:
    - su -c - postgres "psql -q -d sahana-demo -f {{ postgis_version.stdout }}"
    - su -c - postgres "psql -q -d sahana-demo -c 'grant all on geometry_columns to sahana;'"
    - su -c - postgres "psql -q -d sahana-demo -c 'grant all on spatial_ref_sys to sahana;'"
  when: type == 'demo'
  tags:
    - demo

- name: Listen externally
  lineinfile: dest=/etc/postgresql/9.3/main/postgresql.conf
              regexp="#listen_addresses = \'localhost\'"
              backrefs=yes
              line="listen_addresses = '*'"
              state=present
  tags:
    - test
    - demo

- name: Allow external connections
  lineinfile: dest=/etc/postgresql/9.3/main/pg_hba.conf
              insertafter=EOF
              line="host all all 0.0.0.0/0 md5"
              state=present
  tags:
    - test
    - demo

- name: Restart service
  service: name=postgresql state=restarted
  tags:
    - test
    - demo
