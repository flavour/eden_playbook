#!/usr/bin/env python2

import subprocess
import json
import re
import xmlrpclib
import pip

def add_type(match):
    match["type"] = "os"


def main():

    module = AnsibleModule(
        argument_spec = dict(
            web2py_path = dict(required=True),
        )
    )

    params = module.params
    web2py_path = params['web2py_path']

    update = subprocess.Popen(("apt-get", "update"), stdout=subprocess.PIPE).communicate()[0]
    ps = subprocess.Popen(("apt-get", "--just-print", "upgrade"), stdout=subprocess.PIPE)
    output = ps.communicate()[0]

    matches = re.findall(r"Inst\s([\w,\-,\d,\.,~,:,\+]+)\s\[([\w,\-,\d,\.,~,:,\+]+)\]\s\(([\w,\-,\d,\.,~,:,\+]+)\)?", output)

    if matches:
        packages = [dict(zip(("name", "cv", "av", "type"), match)) for match in matches]
        map(add_type, packages)

    pypi = xmlrpclib.ServerProxy('http://pypi.python.org/pypi')
    for dist in pip.get_installed_distributions():
        available = pypi.package_releases(dist.project_name)
        if not available:
           # Try to capitalize pkg name
           available = pypi.package_releases(dist.project_name.capitalize())

        if not available or available[0] == dist.version:
            continue

        packages.append({"name": dist.project_name, "cv": dist.version, "av": available[0], "type": "pip"})

    os.chdir(web2py_path)
    ps = subprocess.Popen(["git", "ls-remote", "origin", "master"], stdout=subprocess.PIPE)
    remote_hash = ps.communicate()[0][:40]
    ps = subprocess.Popen(["git", "rev-parse", "HEAD"], stdout=subprocess.PIPE)
    local_hash = ps.communicate()[0][:40]

    if remote_hash != local_hash:
        packages.append({"name": "web2py", "cv": local_hash, "av": remote_hash, type: "git"})

    module.exit_json(packages=packages)

from ansible.module_utils.basic import *
main()
